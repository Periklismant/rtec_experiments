:- include 'rtfd'.


:- query
label :: 1;
maxstep :: 1..21;
 0: initialState;
maxstep: [\/ SAgent \/ SPerf \/ Q |
	  invalidActionHappened(SPerf, SAgent2, Q) &
	  -powObject(pro, SPerf, SAgent2, Q)].


:- show pow(SAgent, SPerf, Q);
 powObject(SAgent, Perf, SAgent2, Q);
 powDeclare(SAgent);
 permitted(SAgent, SPerf, Q);
 permittedObject(SAgent, Perf, SAgent2, Q);
 permittedDeclare(SAgent);
 obliged(det, declare, SAgent);
 sanctioned(SAgent);
% fact(SProp);
 topic=Q;
 neg(P, Q);
 def(D, Pre, Just, Cons);
 winner(Agent);
 role_of(det)=Role;
 role_of(pro)=Role;
 role_of(opp)=Role;
 turn = Role;
 invalidActionHappened(SPerf, SAgent, Q);
 accepted(Q);
 accepts(SAgent, Q);
 premise(SAgent, Q);
 actCount = C1;
 timeoutCount = C1.



