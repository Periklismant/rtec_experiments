:- include 'rtfd'.


:- query
label :: 1;
maxstep :: 1;
 0: powDeclare(pro),
    actCount = 2,
    accepts(pro, perfected),
    timeoutCount = 3,
%    turn = determiner,
    -powObject(SAgent, Perf, SAgent2, Q),
    -sanctioned(SAgent),
    -winner(SAgent),
    -premise(pro, possesion),
    -premise(pro, notPossesion),
    -premise(pro, d1),
    -premise(pro, notPerfected),
    -premise(opp, possesion),
    -premise(opp, notPossesion),
    -premise(opp, d1),
    -premise(opp, notPerfected);
maxstep: obliged(det, declare, opp).


:- show pow(SAgent, SPerf, Q);
 powObject(SAgent, Perf, SAgent2, Q);
 powDeclare(SAgent);
 permitted(SAgent, SPerf, Q);
 permittedObject(SAgent, Perf, SAgent2, Q);
 permittedDeclare(SAgent);
 obliged(det, declare, SAgent);
 sanctioned(SAgent);
% fact(SProp);
 topic=Q;
 neg(P, Q);
 def(D, Pre, Just, Cons);
 winner(Agent);
 role_of(det)=Role;
 role_of(pro)=Role;
 role_of(opp)=Role;
 turn = Role;
 invalidActionHappened(SPerf, SAgent, Q);
 invalidDeclareHappened(SAgent);
 accepted(Q);
 accepts(SAgent, Q);
 premise(SAgent, Q);
 actCount = C1;
 timeoutCount = C1.
