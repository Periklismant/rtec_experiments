% ----- FILE 'rtfds-queries'


% --- the following express: (i) the maximum number of 
% --- objectionable actions that an agent is permitted to perform
% --- (ii) the maximum number of actions that can physically be 
% --- performed between two timeouts, (iii) the number of turns 
% --- that protagonists may take 

:- macros
   maxAllowedObjActions -> 2;
   maxActionsPerTurn -> 2;
   protocolTurns -> 2.

% --- the action description should be 'included' here
% --- otherwise the macros will not work

:- include rtfds.

% --- these are example-specific objects
% --- notice that we can have exactly two protagonists
% --- and one determiner

:- objects
   det, pro, opp                        :: agent;
   pro, opp                             :: protagonist;
   det                                  :: determiner_sort;
   perfected, possesion			:: proposition.

% ----- ROLES

%rigid role_of(Ag).
caused role_of(opp)=opponent.
caused role_of(pro)=proponent.
caused role_of(det)=determiner.

% ----- TOPIC

%rigid topic.
caused topic=perfected.

% -------------------------------------------------------
% ----- QUERIES

:- show initialState;
	sanctioned(Ag);
	winner=Protag;
	winning=Protag2.

% --- unresolved dispute, but declaring the proponent is objectionable

:- query
label :: 1;
maxstep :: 11;
0: initialState; 
0: claim(pro, topic);
1: oTimeout;
2: retract(pro, topic);
3: claim(pro, possesion);
4: pTimeout;
5: oTimeout;
6: claim(pro, topic);
7: dTimeout;
8: declare(det, pro);
9: objectDeclare(opp, pro).

% --- unresolved dispute, but declaring the opponent is objectionable

:- query
label :: 2;
maxstep :: 11;
0: initialState; 
0: claim(pro, topic);
1: claim(opp, topic);
2: oTimeout;
3: pTimeout;
4: retract(opp, topic);
5: claim(opp, possesion);
6: oTimeout;
7: dTimeout;
8: declare(det, opp);
9: objectDeclare(pro, opp).

% --- dispute resolved in favour of proponent
% --- declaring the proponent is not objectionable even though 
% --- the proponent is sanctioned and the opponent is not

:- query
label :: 3;
maxstep :: 11;
0: initialState; 
0: claim(pro, topic);
1: concede(opp, topic);
2: oTimeout;
3: claim(pro, possesion);
4: retract(pro, possesion);
5: pTimeout;
6: oTimeout;
7: claim(pro, possesion);
8: dTimeout;
9: declare(det, pro);
10: objectDeclare(opp, pro).




