/**************************************************************************
	* Modelling Biological Feedback Loops using Kinetic Logic *

 * The values of system variables, such as 'x' and 'y', are described with 
 * the fluent val/2. val(x,v) denotes that the variable 'x' has the value 'v'.

 * Variable values are subject to change according to the structure and the 
 * dynamic of the feedback loop. 
 * 
 * In general: x'(t) = fx(x,y,t) - x(t),
 *     where x(t) is the value of x at timepoint t, 
 *           fx(x,y,t) is the functions which regulates changes in the value of 'x'
 *           and x'(t) denotes a future increase/decrease in the value of 'x'.     
 * 
 * if x'(t)>0 (resp. '<'), then x(t')=x(t)+1 (resp. '-'), where t'=t + dx{+} (resp. '{-}')
 * unless the change is cancelled.
 *
 * A change is cancelled if the value of function fx changes between t and t'.

 * These functions are represented using events.
 * happensAt(f(x,v),t) denotes that fx(x,y,t)=v at time-point t.
 
 ** Each feedback loop must have distinct variable names ** 
 **************************************************************************/

/*********************************
*   Function value calculation   *
**********************************/

%% Events are generated based on the current values of the variables of the system.

%% These rules are specific to the structure and the parameters (eg deadline values).
%% of each feedback loop

%%% Test Case %%%

/***********************************
 *   2-variable negative loop	 *

	 /---- '+' --->\             
	x               y
	 \<--- '-' ----/

 ***********************************/

%% Variables: 'x' and 'y'
%% Values: 'x' <- '0' or '1'
%%         'y' <- '0' or '1'
initially(x=0).
initially(y=0).

%% Deadlines: dx+ = 6, dx- = 4
%%            dy+ = 6, dy- = 4 
%deadline(x, incr, 6). % dx+ 
%deadline(x, decr, 4). % dx-
%deadline(y, incr, 6). % dy+
%deadline(y, decr, 4). % dy-

/***********************************
 *  Table of variable states *
   
   | x | y | f(x) | f(y) |
   | 0 | 0 |  1   |  0   |
   | 0 | 1 |  0   |  0   |
   | 1 | 0 |  1   |  1   |
   | 1 | 1 |  0   |  1   |

 ***********************************/

%% function values (events) are generated based on the current state.
initiatedAt(f(x)=Vnot, T):-
	initiatedAt(val(y)=V, T),
	boolean_not(V, Vnot).

initiatedAt(f(y)=V, T):-
	initiatedAt(val(x)=V, T).

/***********************
 * Fluents *
 ***********************/

%% These rules model Kinetic Logic and are applied regardless of the structure
%% of the feedback loop under consideration.

/****************************
 * function value inertia   *
 ****************************/

% --- input events report changes in function values
% Note that holdsAt(f(X)=V, T) is true at the subsequent time-point
% after happensAt(f(X,V), T).

/************************************************
 *  Order to change the value of a variable     *
 ***********************************************/

% If the value of the function is greater than the value 
% of the corresponding variable, then an order to increase
% the value of the variable by 1 is staged at time-point T.

% This order is fulfilled, i.e. the value of x increases by 1,
% at time-point T + dx{+}, unless it is cancelled at some time-point
% in [T, T + dx{+} - 1].
initiatedAt(order(X, incr)=pending, T):-
	initiatedAt(f(X)=Vfx, T),
	holdsAt(val(X)=Vx, T),
	Rate is Vfx - Vx,
	Rate > 0.

% Resp. definition for staging an order to decrease the value of x.
initiatedAt(order(X, decr)=pending, T):-
	initiatedAt(f(X)=Vfx, T),
	holdsAt(X=Vx, T),
	Rate is Vfx - Vx,
	Rate < 0.

% An order is cancelled if the value of the function changes
% before the order is fulfilled. 
initiatedAt(order(X, _)=cancelled, T):-
	initiatedAt(f(X)=Vfx, T),
	holdsAt(f(X)=V, T), 
	Vfx \= V.

% An order is fulfilled if it is terminated via maxDuration
% In that case, it has not been cancelled.
maxDuration(order(X,Sign)=pending, order(X,Sign)=fulfilled, D):-
	deadline(X,Sign,D).

/****************************
 *  variable value change   *
 ****************************/


initiatedAt(val(X)=Vxnew,T):-
	% an order has been staged (a) and has not been cancelled (b)
	initiatedAt(order(X,incr)=fulfilled,T), 
	% the rate of variable X is still positive (c).
	holdsAt(val(X)=Vx, T),
	holdsAt(f(X, Vfx), T),
	Rate is Vfx - Vx,
	Rate > 0,
	Vxnew is Vx + 1.

initiatedAt(val(X)=Vxnew,T):-
	% an order has been staged (a) and has not been cancelled (b)
	initiatedAt(order(X,decr)=fulfilled,T), 
	% the rate of variable X is still negative (c).
	holdsAt(val(X)=Vx, T),
	holdsAt(f(X, Vfx), T),
	Rate is Vfx - Vx,
	Rate < 0,
	Vxnew is Vx -1.




