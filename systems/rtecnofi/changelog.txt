
-Renamed files.
-forgetInputFacts was renamed to forget.
-Deleted historyFlag from all files.
-Introduced new declaration language. 
-Replaced cachedEntity with cachingOrder.
-There is no distinction between auxiliary and main entities. All composite entities are treated in the same way.
-Deleted sdFTList in RTEC.prolog. holdsAt is evaluated only by means of holdsFor.
-Renamed holdsForRecognisedSDE to holdsForProcessedIE.
-Renamed holdsAtRecognisedSDE to holdsAtProcessedIE.
-Renamed holdsForRecognisedX to holdsForProcessedX.
-Renamed holdsAtRecognisedX to holdsForProcessedX
-Input entities/events are represented by means of happensAtIE.
-The intervals of input entities/statically determined fluents are represented by means of holdsForIESI.
-The time-points of input entities/statically determined fluents are represented by means of holdsAtIE.
-An inputEntity is the input to the input module, ie happensAtIE, holdsAtIE, holdsForIESI.
-An outputEntity is anything that is computed and cached by RTEC. An outputEntity does not have to be displayed to the user.
-An internalEntity is a type of inputEntity. Its list of intervals is produced by the application-specific pre-processing module and stored in iePList. 
-It is possible for an entity to be neither input nor output (see CAVIAR). These are the entities computed by RTEC that are not cached (to save the cost of assert/retract) because their intervals are used at most once. The fact that an entity may be neither input nor output does not affect the complexity analysis.
-Do not assert the empty list of intervals of IE. In this way for each IE type I avoid an assert, a retract and searching in holdsForProcessedIE becomes more efficient. I modified holdsForProcessedIE to return the empty list of intervals. 
-Do not assert the empty list of intervals of simple or statically determined fluents. 
-Decoupled the information in cachingOrder by introducing grounding and indexOf. To allow for efficient reasoning, in the compilation stage cachingOrder/1, indexOf/2 and grounding/1 are combined to produce cachingOrder2/2. Similarly, collectIntervals/1, indexOf/2 and grounding/1 are combined to produce collectIntervals2/2, and buildFromPoints/1, indexOf/2 and grounding/1 are combined to produce buildFromPoints2/2. 
-Separated input entity processing, ie computing lists of input entity intervals from time-points or single intervals is independent from cachingOrder. 
-Produced and tested compiler. From now on all testing should be performed on automatically compiled event descriptions.
-Added preProcessing step in a generic way in the RTEC loop.
-Comparison with JAIR version on CTM: Accuracy is the same. Efficiency: in small WM sizes the new RTEC version is much better (due to avoiding asserting/retracting empty interval lists) whereas in the largest WM sizes the old RTEC version is slightly better but comparable. I have checked and compared the two versions manually and I do not see how to improve the current version.
-in mass-queries.prolog I commented out the check between two consecutive calls to statistics as there seems to be some minor bug in YAP.
-I deleted retracOrientation from all mass-queries.prolog in CAVIAR as this caused some strange problem. NOTE that in this way CAVIAR testing includes more input facts - orientation - compared to the testing reported in JAIR.
-Introduced new interval manipulation construct for complement, which is defined by means of relative complement.
-simple2vFluent is obsolete. These are now sdFluents defined by means of complement. 
-CAVIAR: walkAway is now close=false which is defined by means of complement. The 'disappear' conditions of meeting have been removed as when one disappears then he is not close to anyone else.
-Introduced start(F=V) event to denote the starting points of cached fluent F=V. (start(F=V) is implemented in a way to avoid artificial starting points that may be introduced by the windowing mechanism.) In this way we can initiate, eg, a fluent when two other fluents start to hold. start(F=V) can also be used in the body of initiatedAt/terminatedAt rules when there is no event in the body of these rules. In this way weak initiates/terminates becomes strong initates/terminates as initiation/termination take place only at the starting point of the combination of fluents in the body of the initiatedAt/terminatedAt rules. The significant reduction of evaluations of initiatedAt/terminatedAt should improve efficiency. The JAIR complexity analysis covers this change (happensAt(start(F=V)) has the same complexity as holdsAt). Note that when start(F=V) is used in the body of initiatedAt/terminatedAt then it should include ALL fluents in the body of such a rule.
-Introduced end(F=V) event to denote the ending points of fluent F=V.
-Cached output entities/events.
-sdfluents/input entities are treated as standard sdfluents, ie they have a structure (iePList) similar to sdFPList. In this way we have a common treatment for all fluents, input or output entities. 
-holdsFor/2, holdsAt/2 and happensAt/2 (ie the predicates used for user interaction) now return all fluent intervals/event time-points, ie for both output and input entities.
-defined nextTimePoint/2, prevTimePoint/2 in order to deal with applications (eg CAVIAR) in which the temporal distance between two consecutive time-points is different than 1. This is a general approach that may very slightly slow reasoning. To deal with this very minor delay I can replace nextTimePoint(T, NextT) with NextT is T+td, where td the temporal distance between two consecutive time-points. Similarly for prevTimePoint/2.


---Fixed in RTEC.prolog start(F=V) events with variables.
---start(F=V) now takes place at the time-point before the start a maximal interval of F=V. Ie start(F=V) denotes strong initiation. startI(F=V) is introduced to denote the start of intervals I. Similarly, end(F=V) now takes place at the end of the maximal intervals of F=V, not at the next time-point. Ie end(F=V) denotes strong termination. IMPORTANT: update previous event descriptions for BACKWARD COMPATIBILITY.
---Updated the 2nd rule of broken to make much more efficient by avoiding to look for initiatedAt(F=V1) when querying from broken(F=V1). IMPORTANT: All values V of a fluent F must be declared by means of simpleFluent/1. DO THIS FOR BACKWARD COMPATIBILITY. 
---Cycles treatment: 
      -see the 'cycles treatment' part. Search for 'CYCLES #1', 'CYCLES #2' and 'CYCLES & DEADLINES'. cyclic/1 added in declarations. Dynamic processedCyclic/2, initiallyCyclic/1, storedCyclicPoints/3 are introduced in RTEC.prolog. When the spec has no cyclic definitions we have to unnecessarily run prepareCyclic and assertCyclic. This is a very minor cost. holdsAtCyclic/3 concerns only simple fluents. Any simple fluent can appear in this predicate (this way, we can have cycles involving more then one fluent).	
      -holdsAtCyclic works only if it is fully ground. 
      -I decided NOT to support start(F=V) and end(F=V) events for cyclic fluents due to efficiency reasons. Instead, I use initiatedAt and terminatedAt rules. ADD THIS NOTE IN THE INSTRUCTIONS OF RTEC.
---Deadlines treatment: (a) 'deadlines treatment' code in RTEC.prolog, called by 'DEADLINES #1' and 'DEADLINES #2' in the eventRecognition loop; and (b) storeStartingPoints(Index, F=V, CompleteInitList) in processSimpleFluents.prolog. Similar to the cycles treatment, when the event description contains no deadlines these parts can be commented out. These parts add only a very minor cost.
Deadline treatment loop:
	1. Process the deadline attempts computed at the previous query time.
		Keep the happensAt(attempt(F=V),T) if (a) holdsAt(F=V,nextTimePoint(Qi-WM)), (b) T>Qi-WM, and (c) T-Duration=<Qi-WM. 
		For \+maxDurationUE we also need that (d) T-Duration=S where S is the start of the interval starting before or on Qi-WM and ending after for which F=V.
		For maxDurationUE we need the last deadline attempt that satisfies (a)-(c).
	2. Compute and store the maximal intervals of fluents.
		Standard simple fluent processing + timeoutTreatment.
	3. Compute and store deadline attempts so that these will be available in the next query time. 
		For \+maxDurationUE retrieve the cached fluent intervals and add Duration to the starting point of each interval.  
		For maxDurationUE retrieve the cached starting points of a fluent, and for each such point add Duration. Note that the starting points in this case may be more due to weak initiation.		
---Updated compiler. It now supports atemporal definitions, findall in the body, initiatedAt/2 and initiatedAt/4 (resp terminatedAt) definitions, initiatedAt and terminatedAt in the body, and converts when necessary body holdsAt literals to holdsAtCyclic. There is also a first attempt to convert holdsAt definitions to holdsForSDFluent.

---Fixed issue with concurrent initiations and terminations (updated RTECv1 github repo): termination takes precedence.

---I added support for SWI; Changes from YAP: 
 (a) cputime -> runtime in statistics/2 (continuousQueries.prolog).
 (b) various multifile and discontiguous declarations in RTEC.prolog.
 
---I am stroring the starting points of all deadline fluents, both maxDuration and maxDurationUE.

---Added support for dynamic grounding in RTEC.prolog.

---Updated continuousER script.

---Used '_' for free variables in inputProcessing.prolog and RTEC.prolog.

---Updated unit tester in order to delete the hard-coded parameters of initialiseRecognition/4.

---Updated the compiler to 
+remove free variables;
+fix bug with fluents with free variable in their value (the free variable was replaced by one value);
+fix bug with repetition of the constraints 'T1=<T, T<T2' (these constraints were added in every happensAt body literal);
+fix bug with initiates/terminates (the constraints 'T1=<T, T<T2' were not added).

---Added to data loader to process dataset in CSV format, as opposed to files with Prolog assertions.

---Periklis: Changes in forget mechanism. RTEC calculates the event per time-point ratio before InitTime and compares it to a user-defined threshold. If it is greater than the threshold, RTEC uses retractall at each time-point. Else, retract entities one by one.

---Periklis: Changes in dynamic grounding. RTEC calculates the overlap between AllOldTerms and AllNewTerms and compares it to a user-defined threshold. If it is greater than the threshold, RTEC retracts the terms in AllOldTerms-AllNewTerms one by one and asserts AllNewTerms-AllOldTerms. Else, RTEC uses retractall for all ground terms and, then, asserts AllNewTerms.



